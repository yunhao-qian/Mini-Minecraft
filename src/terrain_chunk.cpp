#include "terrain_chunk.h"

#include "block_face_generation_task.h"

#include <QThreadPool>

namespace minecraft {

TerrainChunk::PrepareDrawResult TerrainChunk::prepareDraw()
{
    if (!_isVisible) {
        return {.hasOpaqueFaces = false, .hasTranslucentFaces = false};
    }
    {
        const std::lock_guard lock{_blockFaceMutex};
        if (_isBlockFaceReady) {
            // If new instance attributes were generated by a worker thread, upload them to the GPU.
            _opaqueRenderer.uploadInstances(_opaqueBlockFaces);
            _translucentRenderer.uploadInstances(_translucentBlockFaces);
            _rendererVersion = _blockFaceVersion;

            // Instance attributes are no longer needed once uploaded to the GPU.
            _isBlockFaceReady = false;
            _opaqueBlockFaces.clear();
            _translucentBlockFaces.clear();
            _blockFaceVersion = -1;
        }
        if (_rendererVersion < _blockVersion && _blockFaceVersion < 0) {
            // If the renderer data are out of date or unavailable (version = -1), and no worker
            // thread is currently working on it, start a new block face generation task.
            _isBlockFaceReady = false;
            _opaqueBlockFaces.clear();
            _translucentBlockFaces.clear();
            _blockFaceVersion = _blockVersion;
            // Auto-deletion is enabled by default.
            QThreadPool::globalInstance()->start(new BlockFaceGenerationTask{this});
        }
    }
    // The renderer data may be out of date, but we still render them because they are better than
    // nothing.
    return {
        .hasOpaqueFaces = _opaqueRenderer.instanceCount() > 0,
        .hasTranslucentFaces = _translucentRenderer.instanceCount() > 0,
    };
}

} // namespace minecraft
